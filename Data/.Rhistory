geom_line(aes(y = V1, color = "darkblue")) +
geom_line(aes(y = V2, color="darkblue"), linetype="twodash") +
geom_line(aes(y = V3, color="darkblue"), linetype=6) + xlab("") + ylab("")
scale_color_manual(name = "Factors", values = c("B1" = "red", "B2" = "red"))
ggplot(factors, aes(x=dates)) +
geom_line(aes(y = V1, color = "darkred")) +
geom_line(aes(y = V2, color="darkblue"), linetype="twodash") +
geom_line(aes(y = V3, color="darkblue"), linetype=6) + xlab("") + ylab("")
scale_color_manual(name = "Factors", values = c("V1" = "darkred", "V2" = "darkgreen", "V2" = "darkblue" ))
ggplot(factors, aes(x=dates)) +
geom_line(aes(y = V1, color = "V1")) +
geom_line(aes(y = V2, color="V2"), linetype="twodash") +
geom_line(aes(y = V3, color="V3"), linetype=6) + xlab("") + ylab("") +
scale_color_manual(name = "Factors", values = c("V1" = "darkred", "V2" = "darkgreen", "V2" = "darkblue" ))
ggplot(factors, aes(x=dates)) +
geom_line(aes(y = V1, color = "V1")) +
geom_line(aes(y = V2, color="V2"), linetype="twodash") +
geom_line(aes(y = V3, color="V3"), linetype=6) + xlab("") + ylab("") +
scale_color_manual(name = "Factors", values = c("V1" = "darkred", "V2" = "darkgreen", "V3" = "darkblue" ))
ggplot(factors, aes(x=dates)) +
geom_line(aes(y = V1, color = "V1")) +
geom_line(aes(y = V2, color="V2"), linetype="twodash") +
geom_line(aes(y = V3, color="V3"), linetype=6) + xlab("") + ylab("") +
scale_color_manual(name = "Factors", values = c("V1" = "darkred", "V2" = "darkgreen", "V3" = "steelblue" ))
ggplot(factors, aes(x=dates)) +
geom_line(aes(y = V1, color = "Beta 1")) +
geom_line(aes(y = V2, color="Beta 2"), linetype="twodash") +
geom_line(aes(y = V3, color="Beta 3"), linetype=6) + xlab("") + ylab("") +
scale_color_manual(name = "Factors", values = c("Beta 1" = "darkred", "Beta 2" = "darkgreen", "Beta 3" = "steelblue" ))
ggsave("Estimated DNS factors")
dns_plot <- ggplot(factors, aes(x=dates)) +
geom_line(aes(y = V1, color = "Beta 1")) +
geom_line(aes(y = V2, color="Beta 2"), linetype="twodash") +
geom_line(aes(y = V3, color="Beta 3"), linetype=6) + xlab("") + ylab("") +
scale_color_manual(name = "Factors", values = c("Beta 1" = "darkred", "Beta 2" = "darkgreen", "Beta 3" = "steelblue" ))
ggsave("Estimated DNS factors",dns_plot)
ggsave("Estimated DNS factors")
?ggsave
ggsave("Estimated DNS factors", plot = dns_plot
)
ggsave("Estimated DNS factors", plot = dns_plot, device = "png")
dns_plot <- ggplot(factors, aes(x=dates)) +
geom_line(aes(y = V1, color = "Beta 1")) +
geom_line(aes(y = V2, color="Beta 2"), linetype="twodash") +
geom_line(aes(y = V3, color="Beta 3"), linetype=6) + xlab("") + ylab("") +
scale_color_manual(name = "Factors", values = c("Beta 1" = "darkred", "Beta 2" = "darkgreen", "Beta 3" = "steelblue" )) + xlim(30)
dns_plot <- ggplot(factors, aes(x=dates)) +
geom_line(aes(y = V1, color = "Beta 1")) +
geom_line(aes(y = V2, color="Beta 2"), linetype="twodash") +
geom_line(aes(y = V3, color="Beta 3"), linetype=6) + xlab("") + ylab("") +
scale_color_manual(name = "Factors", values = c("Beta 1" = "darkred", "Beta 2" = "darkgreen", "Beta 3" = "steelblue" ))
dns_plot
dns_plot <- ggplot(factors, aes(x=dates)) +
geom_line(aes(y = V1, color = "Beta 1")) +
geom_line(aes(y = V2, color="Beta 2"), linetype="twodash") +
geom_line(aes(y = V3, color="Beta 3"), linetype=6) + xlab("") + ylab("") +
scale_color_manual(name = "Factors", values = c("Beta 1" = "darkred", "Beta 2" = "darkgreen", "Beta 3" = "steelblue" )) + scale_x_continuous(limits=c(0, 30))
dns_plot
dns_plot <- ggplot(factors, aes(x=dates)) +
geom_line(aes(y = V1, color = "Beta 1")) +
geom_line(aes(y = V2, color="Beta 2"), linetype="twodash") +
geom_line(aes(y = V3, color="Beta 3"), linetype=6) + xlab("") + ylab("") +
scale_color_manual(name = "Factors", values = c("Beta 1" = "darkred", "Beta 2" = "darkgreen", "Beta 3" = "steelblue" ))
dns_plot
ggsave("Estimated DNS factors", plot = dns_plot, device = "png")
ggsave("Estimated DNS factors", plot = dns_plot, device = "png", width = "7cm")
ggsave("Estimated DNS factors", plot = dns_plot, device = "png", width = 10)
summary(factors)
cor(factors)
sd(factors)
factors
factors[,lapply(.SD,sd)]
acf()
factors[,lapply(.SD,acf)]
library("tsDyn")
library("tseries")
library("xtable")
library("lattice")
library("data.table")
library("xlsx")
library("ggplot2")
library("reticulate")
#Set directory and load data
wd <- "/Users/antonaleynikov/Desktop/Fixed Income Sentiment strat"
setwd(wd)
data <- data.table(read.xlsx2("VARData.xlsx",1))
data <- data[,lapply(data,as.numeric)]
dates <-as.Date(data$DATE, origin = "1899-12-30")
data$DATE <- dates
varData <- data[, c(2:16)]
yields <- varData[,1:11]
maturities = c(1/12, 1/4, 1/2, 1, 2, 3, 5, 7, 10, 20, 30)
#Pick lambda as in diebold
lambda_seq = seq(2.4,2.5,0.001)
lambda_seq <- lambda_seq[lambda_seq != 0]
#The regressors from page 341 in diebold
r2 <- data.frame()
for (j in 1:length(lambda_seq)){
lambda <- lambda_seq[j]
factor_regressors = data.table( sapply(maturities, function(x) 1),
sapply(maturities, function(x) (1 - exp(-x/lambda))/(x/lambda)),
sapply(maturities, function(x) (1 - exp(-x/lambda))/(x/lambda) - exp(-x/lambda))
)
names(factor_regressors) <- c('level_reg', 'slope_reg' , 'curv_reg')
#Here we fit the factors at each time step
for (i in 1:length(yields$DGS1MO)){
y <- as.numeric(yields[i,])
reg_data <- cbind(y , factor_regressors[,-1])
model <- lm(y ~ slope_reg + curv_reg, data = reg_data)
rsq <- summary(model)$r.squared
r2[i,j] <- rsq
}
}
lambda <- 0.408
varData <- data[, c(2:16)]
yields <- varData[,1:11]
maturities =   c(1/12, 1/4, 1/2, 1, 2, 3, 5, 7, 10, 20, 30)
#Pick lambda as in diebold
#The regressors from page 341 in diebold
factor_regressors = data.table( sapply(maturities, function(x) 1),
sapply(maturities, function(x) (1 - exp(-x*lambda))/(x*lambda)),
sapply(maturities, function(x) (1 - exp(-x*lambda))/(x*lambda) - exp(-x*lambda))
)
names(factor_regressors) <- c('level_reg', 'slope_reg' , 'curv_reg')
#Here we fit the factors at each time step
factors <- data.frame()
for (i in 1:length(yields$DGS1MO)){
y <- as.numeric(yields[i,])
reg_data <- cbind(y , factor_regressors[,-1])
model <- lm(y ~ slope_reg + curv_reg, data = reg_data)
factors[i, 1] = model$coefficients[1]
factors[i, 2] = model$coefficients[2]
factors[i, 3] = model$coefficients[3]
}
factors <- data.table(factors)
ggplot(factors, aes(x=dates)) +
geom_line(aes(y = V1), color = "darkred") +
geom_line(aes(y = V2), color="steelblue", linetype="twodash") +
geom_line(aes(y = V3), color="darkgreen", linetype=3)
# Test for stationarity
#daily data:
T = nrow(factors)
p = ncol(factors)
dfactors = as.matrix(factors[ , lapply(.SD, diff)])
factors <- as.matrix(factors)
#ADF Test for level and first differences
adf_lp <- c()
adf_dlp <- c()
for (i in 1:p){
adf_lp[i] <- unlist(adf.test(factors[,i])$p.value)
}
for (i in 1:p){
adf_dlp [i]<- unlist(adf.test(dfactors[,i])$p.value)
}
#KPSS Test for level and first differences
kpss_lp <- c()
kpss_dlp <- c()
for (i in 1:p){
kpss_lp[i] <- unlist(kpss.test(factors[,i])$p.value)
}
for (i in 1:p){
kpss_dlp[i] <- unlist(kpss.test(dfactors[,i])$p.value)
}
x <- matrix(c(adf_lp,kpss_lp,adf_dlp,kpss_dlp), ncol = 4)
dimnames(x) <- list(names (names(factor_regressors)), c("ADF","KPSS","ADF","KPSS"))
xtable(x)
?LjungBox
??LjungBox
?LjungBox
??LjungBox
# Test for stationarity
#daily data:
T = nrow(factors)
p = ncol(factors)
dfactors = as.matrix(factors[ , lapply(.SD, diff)])
# Test for stationarity
#daily data:
T = nrow(factors)
p = ncol(factors)
dfactors = as.matrix(factors[ , lapply(.SD, diff)])
factors
lambda <- 0.408
varData <- data[, c(2:16)]
yields <- varData[,1:11]
maturities =   c(1/12, 1/4, 1/2, 1, 2, 3, 5, 7, 10, 20, 30)
#Pick lambda as in diebold
#The regressors from page 341 in diebold
factor_regressors = data.table( sapply(maturities, function(x) 1),
sapply(maturities, function(x) (1 - exp(-x*lambda))/(x*lambda)),
sapply(maturities, function(x) (1 - exp(-x*lambda))/(x*lambda) - exp(-x*lambda))
)
names(factor_regressors) <- c('level_reg', 'slope_reg' , 'curv_reg')
#Here we fit the factors at each time step
factors <- data.frame()
for (i in 1:length(yields$DGS1MO)){
y <- as.numeric(yields[i,])
reg_data <- cbind(y , factor_regressors[,-1])
model <- lm(y ~ slope_reg + curv_reg, data = reg_data)
factors[i, 1] = model$coefficients[1]
factors[i, 2] = model$coefficients[2]
factors[i, 3] = model$coefficients[3]
}
factors <- data.table(factors)
# Test for stationarity
#daily data:
T = nrow(factors)
p = ncol(factors)
dfactors = as.matrix(factors[ , lapply(.SD, diff)])
factors <- as.matrix(factors)
#ADF Test for level and first differences
adf_lp <- c()
adf_dlp <- c()
for (i in 1:p){
adf_lp[i] <- unlist(adf.test(factors[,i])$p.value)
}
for (i in 1:p){
adf_dlp [i]<- unlist(adf.test(dfactors[,i])$p.value)
}
#KPSS Test for level and first differences
kpss_lp <- c()
kpss_dlp <- c()
for (i in 1:p){
kpss_lp[i] <- unlist(kpss.test(factors[,i])$p.value)
}
for (i in 1:p){
kpss_dlp[i] <- unlist(kpss.test(dfactors[,i])$p.value)
}
x <- matrix(c(adf_lp,kpss_lp,adf_dlp,kpss_dlp), ncol = 4)
dimnames(x) <- list(names (names(factor_regressors)), c("ADF","KPSS","ADF","KPSS"))
xtable(x)
dfactors
library(rugarch)
dfactors[,1]
garch <- ugarchspec( mean.model = list(armaOrder = c(0,0)) ,
variance.model = list(garchOrder = c(1, 1)))
garch_fit <- ugarchfit(dfactors[,1], data = ret[t:(t + window - 1)], solver = "hybrid")
dfactors <- data.table(dfactors)
dfactors
garch <- ugarchspec( mean.model = list(armaOrder = c(0,0)) ,
variance.model = list(garchOrder = c(1, 1)))
garch_fit <- ugarchfit(garch, data = dfactors[,1], solver = "hybrid")
garch
dfactors[,1]
c <- ugarchfit(garch, data = dfactors$V1, solver = "hybrid")
garch <- ugarchspec( mean.model = list(armaOrder = c(0,0)) ,
variance.model = list(garchOrder = c(1, 1)))
garch_fit <- ugarchfit(garch, data = dfactors$V1, solver = "hybrid")
garch_fit
?jarque.bera.test
jarque.bera.test(dfactors$V1)
?qqnorm
qqnorm(len(dfactors$V1),dfactors$V1)
qqnorm(length(dfactors$V1),dfactors$V1)
qqnorm(length(dfactors$V1),dfactors$V1,frame = F)
qqnorm(length(dfactors$V1),dfactors$V1,frame = FALSE)
?qqnorm
dfactors
dfactors$V1
qqnorm(242,dfactors$V1,frame = FALSE)
?qqnorm
qqnorm(dfactors$V1)
qqline()
qqline(dfactors$V1)
?qq
jarque.bera.test(dfactors$V1)
jarque.bera.test(dfactors$V2)
jarque.bera.test(dfactors$V3)
?qq
qqt(dfactors$V1)
install.packages()
install.packages("limma")
rstudent(100,1)
?rstudent
?dt
qqnorm(dfactors$V1)
?dt
dt(-3:3,2)
dt(-3:1/242:3,2)
length(-3:1/242:3)
length(-3-1/242:1/242:3+1/242)
?linspace
linspace(-3,3,242)
library(pracma)
linspace(-3,3,242)
qt(linspace(-3,3,242) , 2)
qt(linspace(0,1,242) , 2)
qt(linspace(0.01,0.99,242) , 2)
qt <- qt(linspace(0.01,0.99,242) , 2)
?qq
qq(qt, dfactors$V1)
install.packages("qqplotr")
library(qqplotr)
library(qqplotr)
install.packages("qqplotr")
library(qqplotr)
library("qqplotr")
?qqplot
qqplot(dt,dfactors$V1)
dt
qt
qqplot(qt,dfactors$V1)
?qqplot
qqplot(dt,dfactors$V1)
qqplot(qt,dfactors$V1)
qqline(dfactors$V1)
qt <- qt(linspace(0.01,0.99,242) , 8)
qt <- qt(linspace(0.01,0.99,242) , 8)
qt <- qt(linspace(0,1,242) , 8)
qqplot(qt,dfactors$V1)
qqplot(qt,dfactors$V1)
qqline(dfactors$V1)
qt <- qt(linspace(0,1,242) , 8)
qqplot(qt,dfactors$V1)
qqline(dfactors$V1)
qqplot(qt,dfactors$V1)
qqline(dfactors$V1)
qt <- qt(linspace(0,1,242) , 12)
qqplot(qt,dfactors$V1)
qqline(dfactors$V1)
qqplot(qt,dfactors$V1)
qqplot(qt,dfactors$V1)
qqline(dfactors$V1)
qqplot(qt,dfactors$V2)
qqplot(qt,dfactors$V2)
qqline(dfactors$V2)
qt <- qt(linspace(0,1,242) , 14)
qqplot(qt,dfactors$V2)
qqline(dfactors$V1)
qqplot(qt,dfactors$V2)
qqline(dfactors$V1)
qt <- qt(linspace(0,1,242) , 10)
qqline(dfactors$V1)
qqplot(qt,dfactors$V2)
qqline(dfactors$V2)
qqplot(qt,dfactors$V1)
qqline(dfactors$V1)
qqplot(qt,dfactors$V3)
qqline(dfactors$V3)
qqnorm(dfactors$V1)
qqline(dfactors$V1)
qqline(dfactors$V3)
qqplot(qt,dfactors$V3)
qqline(dfactors$V3)
df
lm(dfactors$V2 ~ 1)
lm(dfactors$V2 ~ 1) -> lin
lin$residuals^2
Box.test(lin$residuals^2, lag = 1, type = "Ljung-Box")
Box.test(lin$residuals^2, lag = 2, type = "Ljung-Box")
Box.test(lin$residuals^2, lag = 3, type = "Ljung-Box")
Box.test(lin$residuals^2, lag = 10, type = "Ljung-Box")
Box.test(lin$residuals^2, lag = 20, type = "Ljung-Box")
Box.test(lin$residuals^2, lag = 30, type = "Ljung-Box")
acf(dfactors$V1)
acf(dfactors$V2)
acf(dfactors$V2^2)
acf(dfactors$V2^1)
acf(lin$residuals^2)
library(vars)
res2 <- lm(dfactors$V1~1)$resid^2
acf(res2)
res2 <- lm(dfactors$V2~1)$resid^2
acf(res2)
res2 <- lm(dfactors$V3~1)$resid^2
acf(res2)
Box.test(res2 lag = 1, type = "Ljung-Box")
Box.test(res2, lag = 1, type = "Ljung-Box")
Box.test(res2, lag = 2, type = "Ljung-Box")
Box.test(res2, lag = 3, type = "Ljung-Box")
Box.test(res2, lag = 4, type = "Ljung-Box")
Box.test(res2, lag = 4, type = "Ljung-Box") -> test
test$p.value
plevels <- data.frame()
for (i in 1:5){
plevels[i,1] <- Box.test(res2level, lag = i, type = "Ljung-Box")
plevels[i,2] <- Box.test(res2slope, lag = i, type = "Ljung-Box")
plevels[i,3] <- Box.test(res2curvature, lag = i, type = "Ljung-Box")
}
res2level <- lm(dfactors$V1~1)$resid^2
res2slope <- lm(dfactors$V2~1)$resid^2
res2curvature <- lm(dfactors$V3~1)$resid^2
plevels <- data.frame()
for (i in 1:5){
plevels[i,1] <- Box.test(res2level, lag = i, type = "Ljung-Box")
plevels[i,2] <- Box.test(res2slope, lag = i, type = "Ljung-Box")
plevels[i,3] <- Box.test(res2curvature, lag = i, type = "Ljung-Box")
}
plevels
Box.test(res2level, lag = i1, type = "Ljung-Box")
Box.test(res2level, lag = 1, type = "Ljung-Box")
Box.test(res2level, lag = 1, type = "Ljung-Box") $pvalue
Box.test(res2level, lag = 1, type = "Ljung-Box")$p.value
for (i in 1:5){
plevels[i,1] <- Box.test(res2level, lag = i, type = "Ljung-Box")$p.value
plevels[i,2] <- Box.test(res2slope, lag = i, type = "Ljung-Box")$p.value
plevels[i,3] <- Box.test(res2curvature, lag = i, type = "Ljung-Box")$p.value
}
plevels
for (i in 1:4){
plevels[i,1] <- Box.test(res2level, lag = i, type = "Ljung-Box")$p.value
plevels[i,2] <- Box.test(res2slope, lag = i, type = "Ljung-Box")$p.value
plevels[i,3] <- Box.test(res2curvature, lag = i, type = "Ljung-Box")$p.value
}
plevels
plevels <- data.frame()
for (i in 1:4){
plevels[i,1] <- Box.test(res2level, lag = i, type = "Ljung-Box")$p.value
plevels[i,2] <- Box.test(res2slope, lag = i, type = "Ljung-Box")$p.value
plevels[i,3] <- Box.test(res2curvature, lag = i, type = "Ljung-Box")$p.value
}
plevels
xtable(plevels)
qt <- qt(linspace(0,1,242) , 10)
qqplot(qt,dfactors$V1)
qqline(dfactors$V1)
qt <- qt(linspace(0,1,242) , 10)
qqplot(qt,dfactors$V1)
qqplot(qt,dfactors$V1)
qqline(dfactors$V1)
qt <- qt(linspace(0,1,242) , 9)
qqline(dfactors$V1)
qqplot(qt,dfactors$V1)
qqline(dfactors$V1)
qt <- qt(linspace(0,1,242) , 12)
qqline(dfactors$V1)
qqplot(qt,dfactors$V1)
qqline(dfactors$V1)
qt <- qt(linspace(0,1,242) , 11)
qqplot(qt,dfactors$V1)
qqline(dfactors$V1)
qt <- qt(linspace(0,1,242) , 10)
qqplot(qt,dfactors$V1)
qqline(dfactors$V1)
qt <- qt(linspace(0,1,242) , 9)
qqplot(qt,dfactors$V1)
qqline(dfactors$V1)
qqline(dfactors$V2)
qqline(dfactors$V2)
qqplot(qt,dfactors$V2)
qqline(dfactors$V2)
qqplot(qt,dfactors$V3)
qqline(dfactors$V3)
qt <- qt(linspace(0,1,242) , 10)
qqplot(qt,dfactors$V3)
qqline(dfactors$V3)
qqplot(qt,dfactors$V2)
qqline(dfactors$V2)
?ugarchspec
?ugarchfit
jarque.bera.test(res2level)
jarque.bera.test(res2slope)
jarque.bera.test(res2curvature)
?auto.arima
??auto.arima
library("readxl")
library("vars")
library("tsDyn")
library("rugarch")
library("forecast")
library("data.table")
library("stochvol")
library("readxl")
library("vars")
library("tsDyn")
library("rugarch")
library("forecast")
library("data.table")
library("stochvol")
wd <- "/Users/antonaleynikov/Desktop/Fixed Income Sentiment strat/Data"
setwd(wd)
yields <- data.table(read_xlsx("Yields.xlsx"))
yields
yields <- data.table(read_xlsx("Yields.xlsx"))
exogen <- data.table(read_xlsx("Exogen.xlsx"))
forwards <- data.table(read_xlsx("Forwards.xlsx"))
macro <- data.table(read_xlsx("Macro.xlsx"))
exogen
lapply(exogen$SPX_PE_RATIO, f(x) { 1 / x } )
lapply(exogen$SPX_PE_RATIO, function(x) {1 / x})
sapply(exogen$SPX_PE_RATIO, function(x) {1 / x})
exogen$SPX_PE_RATIO <- sapply(exogen$SPX_PE_RATIO, function(x) {1 / x})
exogen$SPX_PE_RATIO
exogee
exogen
forwards
forwards$Average
forwards$Average / 100
exogen$SPX_PE_RATIO <- exogen$SPX_PE_RATIO - (forwards$Average / 100)
forwards
exogen
forwards$Average[:-1]
forwards$Average[-1]
forwards[,-1]
forwards[-1,]
forwards[1:242,]
forwards(,,.N)
forwards(,.N)
forwards(.N)
exogen$SPX_PE_RATIO <- exogen$SPX_PE_RATIO - (forwards$Average[1:242,] / 100)
forwards$Average[1:242,]
forwards$Average[1:242]
exogen$SPX_PE_RATIO <- exogen$SPX_PE_RATIO - (forwards$Average[1:242] / 100)
exogen
macro
exogen
?data.table
?cbinnd
?cbind
dt <- exogen
dt[, FORWARDS := forwards$Average]
dt[, FORWARDS := forwards$Average[1:242]]
dt
